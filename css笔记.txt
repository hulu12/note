

注意：
1、最后一条声明可以没有分号，但是为了以后修改方便，一般也加上分号。
2、为了使用样式更加容易阅读，可以将每条代码写在一个新行内，如下所示：



1、写的位置
	 <p style="color:red">这里文字是红色。</p>

	 <style type="text/css">
	p{
	   font-size:20px;/*设置文字字号*/
	   color:red;/*设置文字颜色*/
	   font-weight:bold;/*设置字体加粗*/
	}
	</style>

	<link href="base.css" rel="stylesheet" type="text/css" />
		注意：
	1、css样式文件名称以有意义的英文字母命名，如 main.css。
	2、rel="stylesheet" type="text/css" 是固定写法不可修改。
	3、<link>标签位置一般写在<head>标签之内。
    
    内联式 > 嵌入式 > 外部式

    但是嵌入式>外部式有一个前提：嵌入式css样式的位置一定在外部式的后面。如右代码编辑器就是这样，<link href="style.css" ...>代码在<style type="text/css">...</style>代码的前面（实际开发中也是这么写的）
2、标签选择器
h1{
font-weight:normal;
color:red;
}
3、.类选器名称{css样式代码;}
<span class="stress">胆小如鼠</span>
4、ID选择器
在很多方面，ID选择器都类似于类选择符，但也有一些重要的区别：
1、为标签设置id="ID名称"，而不是class="类名称"。
2、ID选择符的前面是井号（#）号，而不是英文圆点（.）。
右侧代码编辑器中就是一个ID选择符的完整实例。

5、类和ID选择器的区别
相同点：可以应用于任何元素
不同点：
1、ID选择器只能在文档中使用一次。与类选择器不同，在一个HTML文档中，ID选择器只能使用一次，而且仅一次。而类选择器可以使用多次。
2、可以使用类选择器词列表方法为一个元素同时设置多个样式。我们可以为一个元素同时设多个样式，但只可以用类选择器的方法实现，ID选择器是不可以的（不能使用 ID 词列表）。
<p>到了<span class="stress bigsize">三年级</span>搜索ddd</p>

6、子选择器
.food>li{border:1px solid red;}
7、包含(后代)选择器
.first  span{color:red;}
总结：>作用于元素的第一代后代，空格作用于元素的所有后代
8、通用选择器 * {color:red;}
9、伪类选择符 a:hover{color:red;}
10、分组选择符 h1,span{color:red;}
它相当于下面两行代码：
h1{color:red;}
span{color:red;}
11、继承
但注意有一些css样式是不具有继承性的。如border:1px solid red;

12、特殊性
因为浏览器是根据权值来判断使用哪种css样式的，权值高的就使用哪种css样式。
下面是权值的规则：
标签的权值为1，类选择符的权值为10，ID选择符的权值最高为100。例如下面的代码：
p{color:red;} /*权值为1*/
p span{color:green;} /*权值为1+1=2*/
.warning{color:white;} /*权值为10*/
p span.warning{color:purple;} /*权值为1+1+10=12*/
#footer .note p{color:yellow;} /*权值为100+10+1=111*/
注意：还有一个权值比较特殊--继承也有权值但很低，有的文献提出它只有0.1，所以可以理解为继承的权值最低。


13、层叠就是在html文件中对于同一个元素可以有多个css样式存在，当有相同权重的样式存在时，会根据这些css样式的前后顺序来决定，处于最后面的css样式会被应用。

14、重要性 !important 注意：!important要写在分号的前面
p{color:red!important;}
p{color:green;}

15、
 文字排版--字体
body{font-family:"Microsoft Yahei";}
字号、颜色
body{font-size:12px;color:#666}
粗体、斜体、下划线、删除线
p span{font-weight:bold;}
p a{font-style:italic;}
p a{text-decoration:underline;}
.oldPrice{text-decoration:line-through;}
缩进
p{text-indent:2em;} 2个空格
段落排版--行间距（行高）
p{line-height:1.5em;}
段落排版--字间距、字母间距
单词间距设置：word-spacing:50px;
段落排版--对齐
text-align:center;
text-align:left;
 text-align:right;

16、元素

常用的块状元素有：
<div>、<p>、<h1>...<h6>、<ol>、<ul>、<dl>、<table>、<address>、<blockquote> 、<form>
常用的内联元素有：
<a>、<span>、<br>、<i>、<em>、<strong>、<label>、<q>、<var>、<cite>、<code>
常用的内联块状元素有：
<img>、<input>

设置display:block就是将元素显示为块级元素。
块级元素特点：
1、每个块级元素都从新的一行开始，并且其后的元素也另起一行。（真霸道，一个块级元素独占一行）
2、元素的高度、宽度、行高以及顶和底边距都可设置。
3、元素宽度在不设置的情况下，是它本身父容器的100%（和父元素的宽度一致），除非设定一个宽度。


内联元素特点：
1、和其他元素都在一行上；
2、元素的高度、宽度、行高及顶部和底部边距不可设置；
3、元素的宽度就是它包含的文字或图片的宽度，不可改变。
小伙伴们你们观查一下右侧代码段，有没有发现一个问题，内联元素之间有一个间距问题，这个问题在本小节的wiki中有介绍，感兴趣的小伙伴可以去查看。
行内元素之间会产生间隙bug问题的场景：
1、当行内元素之间有“回车”、“tab”、“空格”时就会出现间隙。
如下代码：
<div>
<a>1</a>
<a>2</a>
<span>33333</span>
<span>4...
解决方法：

 1、写在一行，之间不要有空格之类的符号。

<div>
<a>1</a><a>2</a><span>33333</span><span>44444</span><em>555555</em>
</div>
2、使用font-size:0

div{font-size:0;}
a,span,em{font-size:16px;}




display:inline-block;
内联块状元素（inline-block）就是同时具备内联元素、块状元素的特点，代码display:inline-block就是将元素设置为内联块状元素。(css2.1新增)，<img>、<input>标签就是这种内联块状标签。
inline-block元素特点：
1、和其他元素都在一行上；
2、元素的高度、宽度、行高以及顶和底边距都可设置。

17、CSS盒子模型
块状元素都可以认为是盒子模型
div{
    border:2px  solid  red;
}
p{border:2px dotted #ccc;}
	1、border-style（边框样式）常见样式有：
	dashed（虚线）| dotted（点线）| solid（实线）。
	2、border-color（边框颜色）中的颜色可设置为十六进制颜色，如:
	border-color:#888;//前面的井号不要忘掉。
	3、border-width（边框宽度）中的宽度也可以设置为：
	thin | medium | thick（但不是很常用），最常还是用象素（px）。

	设置那个边框
	div{border-bottom:1px solid red;}
	border-top:1px solid red;
	border-right:1px solid red; 
	border-left:1px solid red;

  宽度和高度
  margin border padding
  块状元素有一个特点之一：在不设置宽度的情况下，显示为父容器的100%。
  如果上下填充一样为10px，左右一样为20px，可以这么写：
   div{padding:10px 20px;}


 18、布局模型
	 在网页中，元素有三种布局模型：
	1、流动模型（Flow）默认 块状元素 自上而下
	2、浮动模型 (Float) 内联元素a、span、em、strong  从左到右
	3、层模型（Layer）块状元素并排 单独设置块状元素

19、层模型有三种形式：
	1、绝对定位(position: absolute)这条语句的作用将元素从文档流中拖出来，然后使用left、right、top、bottom属性相对于其最接近的一个具有定位属性的父包含块进行绝对定位。如果不存在这样的包含块，则相对于body元素，即相对于浏览器窗口
	position:absolute;
    right:100px;
    top:150px;
	2、相对定位(position: relative)
	如果想为元素设置层模型中的相对定位，需要设置position:relative（表示相对定位），它通过left、right、top、bottom属性确定元素在正常文档流中的偏移位置。相对定位完成的过程是首先按static(float)方式生成一个元素(并且元素像层一样浮动了起来)，然后相对于以前的位置移动，移动的方向和幅度由left、right、top、bottom属性确定，偏移前的位置保留不动。
	3、固定定位(position: fixed)
	fixed：表示固定定位，与absolute定位类型类似，但它的相对移动的坐标是视图（屏幕内的网页窗口）本身。由于视图本身是固定的，它不会随浏览器窗口的滚动条滚动而变化，除非你在屏幕中移动浏览器窗口的屏幕位置，或改变浏览器窗口的显示大小，因此固定定位的元素会始终位于浏览器窗口内视图的某个位置，不会受文档流动影响，这与background-attachment:fixed;属性功能相同。以下代码可以实现相对于浏览器视图向右移动100px，向下移动50px。并且拖动滚动条时位置固定不变。

20、CSS代码缩写占用带宽
 border 上右下左
	 1、如果top、right、bottom、left的值相同，如下面代码：
	margin:10px 10px 10px 10px;
	可缩写为：
	margin:10px;
	2、如果top和bottom值相同、left和 right的值相同，如下面代码：
	margin:10px 20px 10px 20px;
	可缩写为：
	margin:10px 20px;
	3、如果left和right的值相同，如下面代码：
	margin:10px 20px 30px 20px;
	可缩写为：
	margin:10px 20px 30px;

	颜色值缩写
	关于颜色的css样式也是可以缩写的，当你设置的颜色是16进制的色彩值时，如果每两位的值相同，可以缩写一半。
	例子1：
	p{color:#000000;}
	可以缩写为：
	p{color: #000;}
	例子2：
	p{color: #336699;}
	可以缩写为：
	p{color: #369;}

	字体缩写
	网页中的字体css样式代码也有他自己的缩写方式，下面是给网页设置字体的代码：
	body{
	    font-style:italic;
	    font-variant:small-caps; 
	    font-weight:bold; 
	    font-size:12px; 
	    line-height:1.5em; 
	    font-family:"宋体",sans-serif;
	}
	这么多行的代码其实可以缩写为一句：
	body{
	    font:italic  small-caps  bold  12px/1.5em  "宋体",sans-serif;
	}
	注意：
	1、使用这一简写方式你至少要指定 font-size 和 font-family 属性，其他的属性(如 font-weight、font-style、font-varient、line-height)如未指定将自动使用默认值。
	2、在缩写时 font-size 与 line-height 中间要加入“/”斜扛。
	一般情况下因为对于中文网站，英文还是比较少的，所以下面缩写代码比较常用：
	body{
	    font:12px/1.5em  "宋体",sans-serif;
	}
	只是有字号、行间距、中文字体、英文字体设置。



	



