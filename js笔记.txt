1、
	document.write("hello");
	document.getElementById("p1").style.color="blue"; 
2、Js放在head和body中的区别
	浏览器解析html是从上到下的。
	如果把javascript放在head里的话，则先被解析,但这时候body还没有解析，所以会返回空值。一般都会绑定一个监听，当全部的html文档解析完之后，再执行代码：
	   windows.onload=function(){
	       //这里放入执行代码
	   }
	说明:
	放在head中的JS代码会在页面加载完成之前就读取，而放在body中的JS代码，会在整个页面加载完成之后读取。

	这就说明了，如果我们想定义一个全局对象，而这个对象是页面中的某个按钮时，我们必须将其放入body中，道理很明显：如果放入head，那当你定义的时候，那个按钮都没有被加载，可能获得的是一个undefind。
	在HTML body部分中的JavaScripts会在页面加载的时候被执行。
	在HTML head部分中的JavaScripts会在被调用的时候才执行。
	1)head 部分中的脚本: 需调用才执行的脚本或事件触发执行的脚本放在HTML的head部分中。当你把脚本放在head部分中时，可以保证脚本在任何调用之前被加载。
	2）body 部分中的脚本: 当页面被加载时执行的脚本放在HTML的body部分。放在body部分的脚本通常被用来生成页面的内容。
	比如进行页面显示初始化的js必须放在head里面，因为初始化都要求提前进行（如给页面body设置css等）；而如果是通过事件调用执行的function那么对位置没什么要求的。

3、Js中的单引号与双引号问题
	1.单引号和双引号基本都是一种概念，但是二者一起出现时，需要特别注意
	2.单引号包含双引号的时候，里面的双引号不用转义，反之亦然
	看下面代码:
	<input type="button" onclick="alert("3")">-------------------不正确
	<input type="button" onclick="alert('3')">-------------------正确

	双引号中再用双引号要这样（用转义符）：
	var str = "abc\"def\"ghi"
	用反斜杠来禁止解析双引号。
	下面摘录的内容，希望对你有用：

	在一个网页中的按钮，写onclick事件的处理代码，不小心写成如下：
	<input value="Test" type="button" onclick="alert(""OK"");" />

	IE提示出错后，改为：
	<input value="Test" type="button" onclick="alert(\"OK\");" />

	结果还是出错。

	再改为,ok通过:
	<input value="" type="button" onclick="alert('OK');" />
	但为什么javascript中的转义字符\没有效果了呢？

	原来这时，还是归于HTML的管辖范围，所以转义字符应该使用HTML的，而不是javascript的。两个双引号的做法是vbScript的，\"这种做法则是javascript的，而HTML的，则是用"，此外还可以使用："、'。

	再看看下面的代码:

	<script type="text/javascript">
	function Display(LoginEmail, UserName, ID) {
	        alert(LoginEmail);
	    }
	</script>

	　　1.使用单引号传参:
	<a javascript:Display('','Aleax Xie','10101239393')">Test1</a>

	　　如果其中一个参数有一个值含有单引号，那么这个方法会出错.
	<a javascript:Display('abc@a'','Aleax Xie','10101239393')">Test1</a>

	　　改进: 有单引号的加上\', OK。
	<a javascript:Display('abc@a\'','Aleax Xie','10101239393')">Test</a>

	　　2.上面解决了单引号的问题，但如果值中有双引号又出现了问题
	<a javascript:Display('abc@a\'','Aleax Xie','10101239393')">Test</a>

	　　改进: 使用Onclick,给双引号加上\",单引号不用处理.并且不加“或'给JS方法
	 <a javascript:void(0)" onclick=Display("abc@\"ab'","Aleax Xie","10101239393")>Test3</a>

	　　这样解决了Js参数中有单引号与双引号的问题，但这有限制: 参数与参数之前不能有空格,参数值中不能空格,如果有空格,则用" "来代替.

4、输出内容（document.write）document.write(mystr+"<br>");
	确认（confirm 消息对话框） 返回bool
	提问（prompt 消息对话框）
	window.open(<URL>, <窗口名称>, <参数字符串>) 打开窗口
	window.close();
5、	Object.innerHTML  innerHTML 属性用于获取或替换 HTML 元素的内容。
6、 Object.style.property=new style; 改变HTML样式
7、 Object.style.display = value（none,block） 显示和隐藏（display属性）
8、 object.className = classname
9、 JS是区分大小写的，如：classname和ClassName是不一样的。同时注意方法、属性、变量等的大小写吆。
10、
A||B 注意: 如果A为真，A || B为真，不会在执行B; 反之，如果A为假，要由 B 的值来决定 A || B 的值。
A&&B 注意: 如果A为假，A && B为假，不会在执行B; 反之，如果A为真，要由 B 的值来决定 A && B 的值。
11、操作符之间的优先级（高到低）:
算术操作符 → 比较操作符 → 逻辑操作符 → "="赋值符号
12、JS中substr和substring的用法和区别
	string.substr(start [, length ])
	string.substring(start, end)
13、JS 中“===”与 “==”比较的区别
	1. ==用于一般比较，==在比较的时候可以转换数据类型。
	2. ===用于严格比较，===严格比较，只要类型不匹配就返回flase。

14、数组
    var myarray= new Array(8); //创建数组，存储8个数据。 
    注意：
    1.创建的新数组是空数组，没有值，如输出，则显示undefined。
    2.虽然创建数组时，指定了长度，但实际上数组都是变长的，也就是说即使指定了长度为8，仍然可以将元素存储在规定长度以外。
    var myarray = new Array(66,80,90,77,59);//创建数组同时赋值
    myarray.length; //获得数组myarray的长度
    二维数组的表示: myarray[ ][ ]

15、事件
	鼠标单击事件( onclick ）
	鼠标经过事件（onmouseover）
	鼠标移开事件（onmouseout）
	光标聚焦事件（onfocus）
	失焦事件（onblur）
	内容选中事件（onselect）
	文本框内容改变事件（onchange）
	加载事件（onload）
	注意：1. 加载页面时，触发onload事件，事件写在<body>标签内。
      2. 此节的加载页面，可理解为打开一个新页面时。
    卸载事件（onunload）

 16、内置对象
  	推迟一小时 x.setTime(x.getTime() + 60 * 60 * 1000)
  	stringObject.charAt(index)  
  	stringObject.indexOf(substring, startpos) //返回指定的字符串首次出现的位置
  	stringObject.split(separator,limit) //字符串分割split()
  	Math.ceil(x) //向上取整ceil() 
  	//向下取整floor() //四舍五入round()
  	随机数 random()
	random() 方法可返回介于 0 ~ 1（大于或等于 0 但小于 1 )之间的一个随机数。
	arrayObject.concat(array1,array2,...,arrayN) //数组连接concat()
	arrayObject.join(分隔符)//指定分隔符连接数组元素join()
	//颠倒数组元素顺序reverse()
	//arrayObject.slice(start,end) slice() 方法可从已有的数组中返回选定的元素。
	//arrayObject.sort(方法函数)
	1.如果不指定<方法函数>，则按unicode码顺序排列。
	2.如果指定<方法函数>，则按<方法函数>所指定的排序方法排序。
	如要实现这一点，就必须使用一个排序函数，代码如下：
	<script type="text/javascript">
	  function sortNum(a,b) {
	  return a - b;
	 //升序，如降序，把“a - b”该成“b - a”
	}
	 var myarr = new Array("80","16","50","6","100","1");
	  document.write(myarr + "<br>");
	  document.write(myarr.sort(sortNum));
	</script>

17、浏览器对象

	window对象是BOM的核心，window对象指当前的浏览器窗口。
	计时器 setInterval(代码,交互时间);
	取消计时器clearInterval() clearInterval(id_of_setInterval)
	计时器  setTimeout("numCount()",1000);
	取消计时器clearTimeout() clearTimeout(id_of_setTimeout)

	History 对象
	history对象记录了用户曾经浏览过的页面(URL)，并可以实现浏览器前进与后退相似导航的功能。
	注意:从窗口被打开的那一刻开始记录，每个浏览器窗口、每个标签页乃至每个框架，都有自己的history对象与特定的window对象关联。
	语法：
	window.history.[属性|方法]
	注意：window可以省略。
	back()相当于go(-1),代码如下:
	window.history.go(-1);
	window.history.forward(); 、、返回下一个浏览的页面

	Location对象
	location用于获取或设置窗体的URL，并且可以用于解析URL。
	location.[属性|方法]

	Navigator对象
	Navigator 对象包含有关浏览器的信息，通常用于检测浏览器与操作系统的版本。
	对象属性:

	userAgent
	返回用户代理头的字符串表示(就是包括浏览器版本信息等的字符串)
	语法
	navigator.userAgent
	几种浏览的user_agent.，像360的兼容模式用的是IE、极速模式用的是chrom的内核。


	screen对象
	screen对象用于获取用户的屏幕信息。
	语法：
	window.screen.属性
	对象属性:


18、DOM
	
	getElementsByName()方法 返回带有指定名称的节点对象的集合。
		注意:
		1. 因为文档中的 name 属性可能不唯一，所有 getElementsByName() 方法返回的是元素的数组，而不是一个元素。
		2. 和数组类似也有length属性，可以和访问数组一样的方法来访问，从0开始。

	getElementsByTagName()方法
	返回带有指定标签名的节点对象的集合。返回元素的顺序是它们在文档中的顺序。
	语法:getElementsByTagName(Tagname) 返回数组

	getAttribute()方法
	通过元素节点的属性名称获取属性的值。
	setAttribute()方法
	setAttribute() 方法增加一个指定名称和值的新属性，或者把一个现有的属性设定为指定的值。
	语法：
	elementNode.setAttribute(name,value)
	注意：
	1.把指定的属性设置为指定的值。如果不存在具有指定名称的属性，该方法将创建一个新属性。
	2.类似于getAttribute()方法，setAttribute()方法只能通过元素节点对象调用的函数。


	节点属性
	在文档对象模型 (DOM) 中，每个节点都是一个对象。DOM 节点有三个重要的属性 ：
	1. nodeName : 节点的名称
	2. nodeValue ：节点的值
	3. nodeType ：节点的类型
	一、nodeName 属性: 节点的名称，是只读的。
	1. 元素节点的 nodeName 与标签名相同
	2. 属性节点的 nodeName 是属性的名称
	3. 文本节点的 nodeName 永远是 #text
	4. 文档节点的 nodeName 永远是 #document
	二、nodeValue 属性：节点的值
	1. 元素节点的 nodeValue 是 undefined 或 null
	2. 文本节点的 nodeValue 是文本自身
	3. 属性节点的 nodeValue 是属性的值
	三、nodeType 属性: 节点的类型，是只读的。以下常用的几种结点类型:
	元素类型    节点类型
	  元素          1
	  属性          2
	  文本          3
	  注释          8
	  文档          9


	  访问子结点childNodes
	  访问选定元素节点下的所有子节点的列表，返回的值可以看作是一个数组，他具有length属性。
	  语法：
	  elementNode.childNodes

	  访问子结点的第一和最后项
	  一、firstChild 属性返回‘childNodes’数组的第一个子节点。如果选定的节点没有子节点，则该属性返回 NULL。
	  语法：
	  node.firstChild
	  说明：与elementNode.childNodes[0]是同样的效果。 
	  二、 lastChild 属性返回‘childNodes’数组的最后一个子节点。如果选定的节点没有子节点，则该属性返回 NULL。
	  语法：
	  node.lastChild
	  说明：与elementNode.childNodes[elementNode.childNodes.length-1]是同样的效果。 
	  注意: 上一节中，我们知道Internet Explorer 会忽略节点之间生成的空白文本节点，而其它浏览器不会。我们可以通过检测节点类型，过滤子节点。 (以后章节讲解)

	  访问父节点parentNode
	  获取指定节点的父节点
	  语法：elementNode.parentNode
	  注意:父节点只能有一个。

	访问兄弟节点
	  1. nextSibling 属性可返回某个节点之后紧跟的节点（处于同一树层级中）。
	  语法：
	  nodeObject.nextSibling
	  说明：如果无此节点，则该属性返回 null。
	  2. previousSibling 属性可返回某个节点之前紧跟的节点（处于同一树层级中）。
	  语法：
	  nodeObject.previousSibling  
	  说明：如果无此节点，则该属性返回 null。
	  注意: 两个属性获取的是节点。Internet Explorer 会忽略节点间生成的空白文本节点（例如，换行符号），而其它浏览器不会忽略。
	  解决问题方法:
	判断节点nodeType是否为1, 如是为元素节点，跳过

	插入节点appendChild()
	在指定节点的最后一个子节点列表之后添加一个新的子节点。
	语法:
	appendChild(newnode)
	参数:
	newnode：指定追加的节点。
	插入节点insertBefore()
	insertBefore() 方法可在已有的子节点前插入一个新的子节点。
	语法:
	insertBefore(newnode,node);
	参数:
	newnode: 要插入的新节点。
	node: 指定此节点前插入节点。

	删除节点removeChild()
	removeChild() 方法从子节点列表中删除某个节点。如删除成功，此方法可返回被删除的节点，如失败，则返回 NULL。
	语法:
	nodeObject.removeChild(node)
	参数:
	node ：必需，指定需要删除的节点。
	我们来看看下面代码，删除子点。


	替换元素节点replaceChild()
	replaceChild 实现子节点(对象)的替换。返回被替换对象的引用。 
	语法：
	node.replaceChild (newnode,oldnew ) 


	创建元素节点createElement
	createElement()方法可创建元素节点。此方法可返回一个 Element 对象。
	语法：
	document.createElement(tagName)
	参数:
	tagName：字符串值，这个字符串用来指明创建元素的类型。
	注意：要与appendChild() 或 insertBefore()方法联合使用，将元素显示在页面中。

	创建文本节点createTextNode
	createTextNode() 方法创建新的文本节点，返回新创建的 Text 节点。
	语法：
	document.createTextNode(data)

	网页尺寸scrollHeight
	浏览器窗口可视区域大小
	网页尺寸scrollHeight
	网页尺寸offsetHeight




















