1、连接代码
	var mongoose = require("mongoose");
	var db = mongoose.connect("mongodb://127.0.0.1:27017/test");
	db.connection.on("error", function (error) {
	    console.log("数据库连接失败：" + error);
	});
	db.connection.on("open", function () {
	    console.log("------数据库连接成功！------");
	});

2、schema
	var mongoose = require("mongoose");

	var TestSchema = new mongoose.Schema({
	    name : { type:String },//属性name,类型为String
	    age  : { type:Number, default:0 },//属性age,类型为Number,默认为0
	    time : { type:Date, default:Date.now },
	    email: { type:String,default:''}
	});
	基本属性类型有：字符串、日期型、数值型、布尔型(Boolean)、null、数组、内嵌文档等。

3、Model：由schema生成，拥有与数据库交互的能力。
	var db = mongoose.connect("mongodb://127.0.0.1:27017/test");

	// 创建Model
	var TestModel = db.model("test1", TestSchema);

4、Entity —— 由Model创建的实体，使用save方法保存数据，Model和Entity都有能影响数据库的操作，但Model比Entity更具操作性。
	var TestEntity = new TestModel({
	       name : "Lenka",
	       age  : 36,
	       email: "lenka@qq.com"
	});
	console.log(TestEntity.name); // Lenka
	console.log(TestEntity.age); // 36

5、创建集合
	var mongoose = require("mongoose");
	var db = mongoose.connect("mongodb://127.0.0.1:27017/test");
	var TestSchema = new mongoose.Schema({
	    name : { type:String },
	    age  : { type:Number, default:0 },
	    email: { type:String },
	    time : { type:Date, default:Date.now }
	});
	var TestModel = db.model("test1", TestSchema );
	var TestEntity = new TestModel({
	    name : "helloworld",
	    age  : 28,
	    email: "helloworld@qq.com"
	});
	TestEntity.save(function(error,doc){
	  if(error){
	     console.log("error :" + error);
	  }else{
	     console.log(doc);
	  }
	});

6、查询
	Model.find({},function(error,docs){
	   //若没有向find传递参数，默认的是显示所有文档
	});

	Model.find({ "age": 28 }, function (error, docs) {
	  if(error){
	    console.log("error :" + error);
	  }else{
	    console.log(docs); //docs: age为28的所有文档
	  }
	}); 

	1.属性过滤 find(Conditions,field,callback);
		field省略或为Null，则返回所有属性。
	说明：我们只需要把显示的属性设置为大于零的数就可以，当然1是最好理解的，_id是默认返回，如果不要显示加上("_id":0)，但是，对其他不需要显示的属性且不是_id，如果设置为0的话将会抛异常或查询无果。
	//返回只包含一个键值name、age的所有记录
	Model.find({},{name:1, age:1, _id:0}，function(err,docs){
	   //docs 查询结果集
	})

	2、单条数据 findOne(Conditions,callback);

	TestModel.findOne({ age: 27}, function (err, doc){
	   // 查询符合age等于27的第一条数据
	   // doc是查询结果
	});

	3.单条数据 findById(_id, callback);

	TestModel.findById('obj._id', function (err, doc){
	 //doc 查询结果文档
	});	
	findById方法根据_id来查询某条文档，而且只是识别-id值。


6.1 高级查询
	"$lt"(小于)，"$lte"(小于等于),"$gt"(大于)，"$gte"(大于等于)，"$ne"(不等于)，"$in"(可单值和多个值的匹配)，$nin ,"$or"(查询多个键值的任意给定值)，"$exists"(表示是否存在的意思)"$all" 匹配所有。 
	$size数组元素个数

	正则表达式
	查询不匹配name=B*带头的记录
	db.users.find({name: {$not: /^B.*/}});


	查询a 大于3 的数据，下面的查询方法殊途同归
	 db.c1.find( { a : { $gt: 3 } } );
	 db.c1.find( { $where: "this.a > 3" } );
	 db.c1.find("this.a > 3");
	 f = function() { return this.a > 3; } db.c1.find(f);
	不是非常必要时，一定要避免使用"$where"查询，因为它们在速度上要比常规查询慢很对。每个文档都要从BSON转换成Javascript对象，然后通过"$where"表达式来运行。

	计数
	db.users.find().skip(10).limit(5).count(true);



	例子
	Model.find({"age":{"$gt":18,"$lt":60}},function(error,docs){
	   //查询所有nage大于18小于60的数据
	});


	Model.find({name:{$ne:"tom"},age:{$gte:18}},function(error,docs){
	  //查询name不等于tom、age>=18的所有数据
	});


	Model.find({ age:{$in:[20,30]}},function(error,docs){
	  //可以把多个值组织成一个数组
	}); 

	Model.find({"$or":[{"name":"yaya"},{"age":28}]},function(error,docs){
	  //查询name为yaya或age为28的全部文档
	});

	Model.find({name: {$exists: true}},function(error,docs){
	  //查询所有存在name属性的文档
	});

	Model.find({telephone: {$exists: false}},function(error,docs){
	  //查询所有不存在telephone属性的文档
	});

	db.users.find({course:{$all:["js","Mongodb"]}});

	NULL值处理
	因为”null”不仅会匹配某个键的值为null的文档，而且还会匹配不包含这个键的文档 。那么怎么样才能只找到”Lily”呢?我们用exists 来限制 一下即可:
	db.users.find({sex:{"$in":[null], "$exists":true}});

	取模
	db.student.find( { age: { $mod : [ 10 , 1 ] } } )




7、保存
	1. Model.create(文档数据, callback))

	Model.create({ name:"model_create", age:26}, function(error,doc){
	    if(error) {
	        console.log(error);
	    } else {
	        console.log(doc);
	    }
	});
      
    2、 Entity.save(文档数据, callback))
	var Entity = new Model({name:"entity_save",age: 27});

	Entity.save(function(error,doc) {
	    if(error) {
	        console.log(error);
	    } else {
	        console.log(doc);
	    }
	});
	

8、 更新
	示例：obj.update(查询条件,更新对象,callback);

	var conditions = {name : 'test_update'};

	var update = {$set : { age : 16 }};

	TestModel.update(conditions, update, function(error){
	    if(error) {
	        console.log(error);
	    } else {
	        console.log('Update success!');
	    }
	});

9、 删除
	示例：obj.remove(查询条件,callback);

	var conditions = { name: 'tom' };

	TestModel.remove(conditions, function(error){
	    if(error) {
	        console.log(error);
	    } else {
	        console.log('Delete success!');
	    }
	});


10、游标
	
	1.限制数量：find(Conditions,fields,options,callback);

	Model.find({},null,{limit:20},function(err,docs){
	    console.log(docs);
	});

	2.跳过数量：find(Conditions,fields,options,callback);

	Model.find({},null,{skip:4},function(err,docs){
	    console.log(docs);
	});
	
	3、sort函数可以将查询结果数据进行排序操作，该函数的参数是一个或多个键/值对，键代表要排序的键名，值代表排序的方向，1是升序，-1是降序。

	结果排序：find(Conditions,fields,options,callback);

	Model.find({},null,{sort:{age:-1}},function(err,docs){
	  //查询所有数据，并按照age降序顺序返回数据docs
	});

	MongoDb 游标
	find命令并不直接返回结果，而是返回一个结果集的迭代器，即游标。
	方法1、for( var c = db.t3.find(); c.hasNext(); ) {
	... printjson( c.next());
	... }

	方法2、 db.t3.find().forEach( function(u) { printjson(u); } );

	游标信息：
	可以通过使用命令cursorInfo获取以下游标信息：
	打开的游标的总数；
	当前客户端使用的游标大小；
	自上次重新启动服务器的超时游标数量。
	参考下面的例子：
	db.runCommand( { cursorInfo: 1 } )






11、属性方法
	ObjectId是一个12字节的 BSON 类型字符串。按照字节顺序，一次代表：

	4字节：UNIX时间戳
	3字节：表示运行MongoDB的机器
	2字节：表示生成此_id的进程
	3字节：由一个随机数开始的计数器生成的值

	添加属性值
	var mongoose = require('mongoose');
	var TempSchema = new mongoose.Schema;
	TempSchema.add({ name: 'String', email: 'String', age: 'Number' });

	实例方法

	var mongoose = require('mongoose');
	var saySchema = new mongoose.Schema({name : String});
	saySchema.method('say', function () {
	  console.log('Trouble Is A Friend');
	})
	var say = mongoose.model('say', saySchema);
	var lenka = new say();
	lenka.say(); //Trouble Is A Friend

	schema 静态方法
	TestSchema.static('findByName', function (name, callback) {
	    return this.find({ name: name }, callback);
	});
	var TestModel = db.model("test1", TestSchema );		
	TestModel.findByName('tom', function (err, docs) {
	 //docs所有名字叫tom的文档结果集
	});

	schema 追加方法
	TestSchema.methods.speak = function(){
	  console.log('我的名字叫'+this.name);
	}

12、mongoDB存储过程
	
	db.system.js.save({_id:"addNumbers", value:function(x, y){ return x + y; }});
	db.system.js.find() //查询存储过程
	db.eval('addNumbers(3, 4.2)'); //调用存储过程
	


